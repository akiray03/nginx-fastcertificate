include /usr/local/nginx/conf/worker_processes.conf;
daemon off;
user nginx;

events {
    worker_connections  1024;
}

include /usr/local/nginx/conf/env_vars.conf;
env REDIS_HOST;
env SSL_DOMAINS;
env INTERNAL_IP;
env CERTIFICATE_UPDATE_INTERVAL;
env PROXY1_PORT_80_TCP_ADDR;
env PROXY1_PORT_80_TCP_PORT;
env PROXY2_PORT_80_TCP_ADDR;
env PROXY2_PORT_80_TCP_PORT;
env PROXY3_PORT_80_TCP_ADDR;
env PROXY3_PORT_80_TCP_PORT;

http {
    include       mime.types;
    default_type  application/octet-stream;

    error_log logs/error.log debug;

    mruby_init_worker_code '
            host = ENV["REDIS_HOST"] || "redis"
            port = (ENV["REDIS_PORT"] || "6379").to_i
            Userdata.new.redis = Redis.new(host, port)
    ';


    mruby_init_code '
        secret_token = SecureRandom.uuid

        # Setup dehydrated
        Userdata.new.dehydrated_opts = {
                            bin: "/usr/local/nginx/conf/auto-ssl/dehydrated",
                            conf: "/usr/local/nginx/conf/auto-ssl/dehydrated.conf",
                            hook: "/usr/local/nginx/conf/auto-ssl/ngx_mruby-hook.sh",
                            secret_token: secret_token,
                          }

        Userdata.new.allow_domains = ENV["SSL_DOMAINS"].split(" ")

        Userdata.new.auto_ssl_secret = secret_token
        Userdata.new.auto_ssl_port = 11111
    ';

    sendfile        on;
    keepalive_timeout  65;

    server {
        listen       443 ssl;
        server_name _;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_certificate /usr/local/nginx/conf/dummy.crt;
        ssl_certificate_key /usr/local/nginx/conf/dummy.key;

        mruby_ssl_handshake_handler_code '
          ssl = Nginx::SSL.new
          domain = ssl.servername
          acme = Nginx::SSL::ACME.new domain, Userdata.new.dehydrated_opts, Userdata.new.allow_domains

          raise "not allowed servername: #{domain.inspect}" unless acme.allow_domain?

          redis = Userdata.new.redis
          if redis["#{domain}.crt"].nil? or redis["#{domain}.key"].nil?
            acme.auto_cert_deploy
          end

          certificate_update_interval = (ENV["CERTIFICATE_UPDATE_INTERVAL"] || 60 * 24 * 3600).to_i
          if redis["#{domain}.createdAt"].nil? || redis["#{domain}.createdAt"].to_i + certificate_update_interval < Time.now.to_i
            acme.auto_cert_deploy
          end

          ssl.certificate_data = redis["#{domain}.crt"]
          ssl.certificate_key_data = redis["#{domain}.key"]
        ';

        location / {
            mruby_set_code $backend_url '
              def backend_url
                r = Nginx::Request.new
                h = r.hostname.gsub(".", "_")

                url = ENV["#{h}_PROXY_TO_URL"]
                if url
                  if url.index("INTERNAL_IP")
                    url = url.sub("INTERNAL_IP", ENV["INTERNAL_IP"])
                  end
                  return url
                end

                host = ENV["#{h}_PROXY_TO_HOST"]
                port = ENV["#{h}_PROXY_TO_PORT"]
                if host.nil?
                  host = "127.0.0.1"
                  port = 18080
                elsif host == "INTERNAL_IP"
                  host = ENV["INTERNAL_IP"]
                end
                port ? "http://#{host}:#{port}" : "http://#{host}"
              end

              backend_url
            ';
            proxy_pass $backend_url;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_redirect off;
        }
    }

    upstream default_upstream {
      server 127.0.0.1:18080;
    }

    server {
        listen 18080;
        server_name _;
        location / {
            mruby_content_handler_code 'Nginx.rputs "hello #{Nginx::Request.new.hostname} world!"';
        }
    }

    server {
        listen 80;
        server_name _;

        location ^~ /.well-known/acme-challenge/ {
            mruby_content_handler_code '

              Nginx.return -> do
                r = Nginx::Request.new
                redis = Userdata.new.redis
                access_token = Nginx::SSL::ACME.token_filename_from_url(r)
                stored_token = redis["#{r.hostname}_token_filename"]

                if access_token != stored_token
                  Nginx.log Nginx::LOG_ERR, "ACME challenge token not found"
                  Nginx.log Nginx::LOG_ERR, "access token: #{access_token}"
                  Nginx.log Nginx::LOG_ERR, "stored token: #{stored_token}"
                  return Nginx::HTTP_NOT_FOUND
                end

                Nginx.rputs redis["#{r.hostname}_token_value"]
              end.call
            ';
        }

        location = /.well-known/acme-challenge/ {
            return 404;
        }

        # redirecto to SSL
        location  / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 127.0.0.1:11111;
        server_name localhost;

        location /deploy-cert {
            mruby_enable_read_request_body on;
            mruby_content_handler_code '

              Nginx.return -> do
                r = Nginx::Request.new

                if Userdata.new.auto_ssl_secret == Nginx::SSL::ACME.secret_token(r)
                  cert_info = Nginx::SSL::ACME.deploy_cert_information r
                  redis = Userdata.new.redis
                  redis.mset "#{cert_info[:domain]}.key", cert_info[:key], "#{cert_info[:domain]}.crt", cert_info[:crt], "#{cert_info[:domain]}.createdAt", Time.now.to_i
                  Nginx.rputs "deploy cert ok"
                  return Nginx::HTTP_OK
                end

                return Nginx::HTTP_UNAUTHORIZED
              end.call
            ';
        }

        location /deploy-challenge {
            mruby_enable_read_request_body on;
            mruby_content_handler_code '
              Nginx.log Nginx::LOG_ERR, "deploy-challenge start."

              Nginx.return -> do
                r = Nginx::Request.new

                if Userdata.new.auto_ssl_secret == Nginx::SSL::ACME.secret_token(r)
                  domain = Nginx::SSL::ACME.challenged_domain r
                  redis = Userdata.new.redis
                  redis["#{domain}_token_filename"] = Nginx::SSL::ACME.challenged_token_filename r
                  redis["#{domain}_token_value"] = Nginx::SSL::ACME.challenged_token_value r
                  Nginx.rputs "depoy challenge ok"
                  return Nginx::HTTP_OK
                end

                return Nginx::HTTP_UNAUTHORIZED
              end.call
            ';
        }

        location / {
            mruby_content_handler_code "Nginx.rputs 'hello 11111 world'";
        }
    }
}

include /usr/local/nginx/conf/conf.d/*.conf;
